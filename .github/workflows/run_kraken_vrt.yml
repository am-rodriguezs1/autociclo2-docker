name: Ghost v5 vs v4 Visual Regression with Pixelmatch

on:
  workflow_dispatch:
    inputs:
      ghost_version_v5:
        description: 'Ghost version (v5.x.x)'
        required: true
        default: '5.114.1'
      ghost_version_v4:
        description: 'Ghost version (v4.x.x)'
        required: true
        default: '4.5.0'

jobs:
  test-ghost-v5:
    name: Test Ghost v5.x
    runs-on: ubuntu-latest

    env:
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
      PUPPETEER_LAUNCH_ARGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --remote-debugging-port=9222"
      NODE_ENV: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install system dependencies (for Ghost v5 runner)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            google-chrome-stable xvfb curl wget gnupg unzip sudo \
            libnss3 libatk-bridge2.0-0 libxss1 libgbm1 libasound2t64 \
            libxcomposite1 libxdamage1 libxrandr2 libgtk-3-0 libdrm2 \
            ca-certificates apt-transport-https android-tools-adb
          echo "Chrome version: $(google-chrome-stable --version)"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "ADB version: $(adb version || echo 'adb not found after install attempt')"

      - name: Install latest Ghost CLI
        run: sudo npm install -g ghost-cli && ghost --version

      - name: Create Ghost working dir (v5)
        run: mkdir -p ${{ github.workspace }}/ghost-instance-v5

      - name: Set up Ghost v5.x instance
        working-directory: ${{ github.workspace }}/ghost-instance-v5
        run: |
          echo "Instalando Ghost versión: ${{ github.event.inputs.ghost_version_v5 }}"
          ghost install ${{ github.event.inputs.ghost_version_v5 }} \
            --no-prompt --no-start --local --db sqlite3 \
            --no-setup-linux-user --process local
          echo "Iniciando Ghost (v5)..."
          ghost start --no-enable-stackdriver

      - name: Wait for Ghost v5.x to be ready
        working-directory: ${{ github.workspace }}/ghost-instance-v5
        run: |
          echo "Esperando que Ghost (v5) esté listo..."
          for i in {1..30}; do
            if curl -s --fail http://localhost:2368/ghost/ > /dev/null; then
              echo "Ghost (v5) está listo!"
              exit 0
            fi
            echo "Intento $i: Ghost (v5) no está listo aún..."
            sleep 5
          done
          echo "Error: Ghost (v5) no inició a tiempo."
          ghost log -e production
          exit 1
      
      - name: Install Kraken dependencies (for Ghost v5 tests)
        run: npm ci --prefix ./e2e/misw-4103-kraken

      - name: Run Kraken tests against Ghost v5.x (using test:all)
        working-directory: ./e2e/misw-4103-kraken
        env:
          GHOST_VERSION: ${{ github.event.inputs.ghost_version_v5 }}
        run: |
          echo "GHOST_VERSION para screenshots será: $GHOST_VERSION"
          mkdir -p ./screenshots 
          mkdir -p ./reports
          xvfb-run -a --server-args="-screen 0 1280x1024x24" npm run test:all

      - name: Upload Kraken screenshots (Ghost v5)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kraken-screenshots-ghost-v5
          path: ${{ github.workspace }}/e2e/misw-4103-kraken/screenshots/

      - name: Teardown Ghost v5.x
        if: always()
        working-directory: ${{ github.workspace }}/ghost-instance-v5
        run: |
          (ghost stop) || echo "Ghost v5 stop failed or was not running."

  test-ghost-v4:
    name: Test Ghost v4.x
    runs-on: ubuntu-22.04

    env:
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
      PUPPETEER_LAUNCH_ARGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --remote-debugging-port=9222"
      NODE_ENV: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 14.x
        uses: actions/setup-node@v4
        with:
          node-version: '14.x'

      - name: Install system dependencies (for Ghost v4 runner)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            google-chrome-stable xvfb curl wget gnupg unzip sudo \
            libnss3 libatk-bridge2.0-0 libxss1 libgbm1 libasound2 \
            libxcomposite1 libxdamage1 libxrandr2 libgtk-3-0 libdrm2 \
            ca-certificates apt-transport-https android-tools-adb
          echo "Chrome version: $(google-chrome-stable --version)"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "ADB version: $(adb version || echo 'adb not found after install attempt')"

      - name: Install compatible Ghost CLI for Ghost 4.x
        run: sudo npm install -g ghost-cli@1.21.0 && ghost --version

      - name: Create Ghost working dir (v4)
        run: mkdir -p ${{ github.workspace }}/ghost-instance-v4

      - name: Set up Ghost 4.x instance
        working-directory: ${{ github.workspace }}/ghost-instance-v4
        run: |
          echo "Instalando Ghost versión: ${{ github.event.inputs.ghost_version_v4 }}"
          ghost install ${{ github.event.inputs.ghost_version_v4 }} \
            --force --no-prompt --no-start --local --db sqlite3 \
            --no-setup-linux-user --dir ${{ github.workspace }}/ghost-instance-v4 --process local
          echo "Iniciando Ghost (v4)..."
          ghost start --no-enable-stackdriver

      - name: Wait for Ghost 4.x to be ready
        working-directory: ${{ github.workspace }}/ghost-instance-v4
        run: |
          echo "Esperando que Ghost (v4) esté listo..."
          for i in {1..30}; do
            if curl -s --fail http://localhost:2368/ghost/ > /dev/null; then
              echo "Ghost (v4) está listo!"
              exit 0
            fi
            echo "Intento $i: Ghost (v4) no está listo aún..."
            sleep 5
          done
          echo "Error: Ghost (v4) no inició a tiempo."
          ghost log -e production
          exit 1
      
      # MODIFICACIÓN AQUÍ para hacer más robusta la instalación de dependencias de Kraken para v4
      - name: Install Kraken dependencies in sub-directory (for Ghost v4 tests)
        run: |
          echo "Instalando dependencias de Kraken en ./e2e/misw-4103-kraken con Node.js $(node -v) y npm $(npm -v)..."
          npm install --prefix ./e2e/misw-4103-kraken
          echo "Instalando explícitamente @cucumber/cucumber@7.2.1 en el subdirectorio de Kraken..."
          npm install --prefix ./e2e/misw-4103-kraken @cucumber/cucumber@7.2.1
      
      - name: Explicitly install/update kraken-node in sub-directory (for Ghost v4 tests)
        working-directory: ./e2e/misw-4103-kraken
        run: |
          echo "Ejecutando 'npm install kraken-node' en $(pwd)..."
          npm install kraken-node

      # Fin de la MODIFICACIÓN

      - name: Run Kraken tests against Ghost v4.x (using test:base)
        working-directory: ./e2e/misw-4103-kraken
        env:
          GHOST_VERSION: ${{ github.event.inputs.ghost_version_v4 }}
        run: |
          echo "GHOST_VERSION para screenshots será: $GHOST_VERSION"
          mkdir -p ./screenshots 
          mkdir -p ./reports
          xvfb-run -a --server-args="-screen 0 1280x1024x24" npm run test:base

      - name: Upload Kraken screenshots (Ghost v4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kraken-screenshots-ghost-v4
          path: ${{ github.workspace }}/e2e/misw-4103-kraken/screenshots/

      - name: Teardown Ghost 4.x
        if: always()
        working-directory: ${{ github.workspace }}/ghost-instance-v4
        run: |
          (ghost stop) || echo "Ghost v4 stop failed or was not running."

  compare-screenshots:
    name: Compare Screenshots with Pixelmatch
    needs: [test-ghost-v5, test-ghost-v4]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for pixelmatch script)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # O la versión que usa tu script index.js

      - name: Download Ghost v5 screenshots artifact
        uses: actions/download-artifact@v4
        with:
          name: kraken-screenshots-ghost-v5
          path: ./screenshots-v5 # Descarga en esta carpeta en la raíz del workspace

      - name: Download Ghost v4 screenshots artifact
        uses: actions/download-artifact@v4
        with:
          name: kraken-screenshots-ghost-v4
          path: ./screenshots-v4 # Descarga en esta carpeta en la raíz del workspace

      - name: List downloaded artifact contents (Debug)
        run: |
          echo "Contents of ./screenshots-v5:"
          ls -R ./screenshots-v5
          echo "Contents of ./screenshots-v4:"
          ls -R ./screenshots-v4
        continue-on-error: true

      - name: Install Pixelmatch script dependencies
        # Si tu vrt/misw-4103-pixelmatch/ tiene su propio package.json, usa:
        # working-directory: ./vrt/misw-4103-pixelmatch
        # run: npm install
        # Si no, y las dependencias (pixelmatch, pngjs) están en el package.json raíz o se instalan globalmente:
        run: npm install pixelmatch pngjs

      - name: Run Pixelmatch comparison script (index.js)
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }} # Asegura que GITHUB_WORKSPACE esté disponible para la detección
          GHOST_VERSION_V5_FOR_VRT: ${{ github.event.inputs.ghost_version_v5 }}
          GHOST_VERSION_V4_FOR_VRT: ${{ github.event.inputs.ghost_version_v4 }}
          # Opcional: puedes pasar las rutas completas si prefieres no depender de la construcción dentro de vrt.config.js para Actions
          # BASE_SCREENSHOTS_PATH_FOR_VRT: ${{ github.workspace }}/screenshots-v4/screenshots/v${{ github.event.inputs.ghost_version_v4 }}
          # RC_SCREENSHOTS_PATH_FOR_VRT: ${{ github.workspace }}/screenshots-v5/screenshots/v${{ github.event.inputs.ghost_version_v5 }}
          # OUTPUT_PATH_FOR_VRT: ${{ github.workspace }}/VRTReportPixelmatch
        run: node ./vrt/misw-4103-pixelmatch/index.js

      - name: Upload Pixelmatch results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pixelmatch-VRT-report
          # Esta ruta debe coincidir con 'outputDir' cuando está en GitHub Actions
          path: ./VRTReportPixelmatch/ 

      - name: Check for differences (Fail job if diffs exist)
        # Esta lógica necesita ser implementada en tu index.js
        # o mediante un script que analice los resultados de VRTReportPixelmatch
        run: |
          REPORT_DIR="./VRTReportPixelmatch"
          echo "Revisar artefactos en '$REPORT_DIR' para ver los resultados de la comparación visual."
          # Ejemplo: si tu index.js crea un archivo 'FAIL_VRT.txt' si hay diferencias:
          # if [ -f "$REPORT_DIR/FAIL_VRT.txt" ]; then
          #   echo "::error::Pixel differences found by VRT script."
          #   exit 1
          # fi

